{"version":3,"sources":["../src/zklock.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAqE;AACrE,iEAAkD;AAClD,qCAAiC;AAMjC,MAAa,eAAe;IAM1B,YACE,eAAuB,EACvB,QAAgB,EAChB,OAAgC;QAEhC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAA;QACtC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAC5D,IAAI,CAAC,MAAM,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,eAAM,CAAA;QAC3E,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAA;IAC1B,CAAC;IAEY,IAAI;;YACf,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE;gBACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAA;YAClD,CAAC,CAAC,CAAA;YAEF,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;QAC/B,CAAC;KAAA;IAEY,WAAW,CAAE,QAAiC;;YACzD,MAAM,IAAI,CAAC,KAAK,CAAA;YAChB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAClB,IAAI,CAAC,QAAQ,EACb,IAAW,EACX,SAAS,CAAC,UAAU,CAAC,SAAS,EAC9B,CAAC,KAAU,EAAE,QAAa,EAAE,EAAE;gBAC5B,IAAI,KAAK,EAAE;oBACT,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,mCAAmC,QAAQ,WAAW,KAAK,CAAC,OAAO,EAAE,CACtE,CAAA;oBACD,QAAQ,CAAC,KAA0B,CAAC,CAAA;oBACpC,OAAM;iBACP;gBACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,QAAQ,EAAE,CAAC,CAAA;gBAEnE,QAAQ,EAAE,CAAA;YACZ,CAAC,CACF,CAAA;QACH,CAAC;KAAA;IAEM,WAAW,CAChB,QAAgB,EAChB,QAAiC;QAEjC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAU,EAAE,EAAE;YAC5C,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,mCAAmC,QAAQ,YAAY,KAAK,CAAC,OAAO,EAAE,CACvE,CAAA;gBAED,QAAQ,CAAC,KAA0B,CAAC,CAAA;gBACpC,OAAM;aACP;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sCAAsC,QAAQ,EAAE,CAAC,CAAA;YAClE,QAAQ,EAAE,CAAA;QACZ,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAA;QACvD,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;IACvB,CAAC;IAEM,EAAE,CAAE,KAAa,EAAE,QAAkC;QAC1D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;IACnC,CAAC;IAEM,IAAI,CAAE,KAAa,EAAE,QAAkC;QAC5D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;IACrC,CAAC;CACF;AA7ED,0CA6EC","file":"zklock.js","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-member-accessibility */\r\nimport * as zookeeper from 'node-zookeeper-client'\r\nimport { logger } from './logger'\r\nimport { type Logger } from 'winston'\r\n\r\nexport interface DistributedLockOptions {\r\n  logger: Logger\r\n}\r\nexport class DistributedLock {\r\n  public readonly zkClient: zookeeper.Client\r\n  private readonly zkConnectString: string\r\n  private readonly lockPath: string\r\n  private readonly ready: Promise<any>\r\n  private readonly logger: Logger\r\n  constructor (\r\n    zkConnectString: string,\r\n    lockPath: string,\r\n    options?: DistributedLockOptions\r\n  ) {\r\n    this.zkConnectString = zkConnectString\r\n    this.lockPath = lockPath\r\n    this.zkClient = zookeeper.createClient(this.zkConnectString)\r\n    this.logger = (options != null) && options.logger ? options.logger : logger\r\n    this.ready = this.init()\r\n  }\r\n\r\n  public async init (): Promise<void> {\r\n    this.zkClient.once('connected', () => {\r\n      this.logger.info('Distributed Lock initialised')\r\n    })\r\n\r\n    await this.zkClient.connect()\r\n  }\n\r\n  public async acquireLock (callback: (error?: Error) => void): Promise<void> {\r\n    await this.ready\r\n    this.zkClient.create(\r\n      this.lockPath,\r\n      null as any,\r\n      zookeeper.CreateMode.EPHEMERAL,\r\n      (error: any, lockPath: any) => {\r\n        if (error) {\r\n          this.logger.error(\r\n            `Error in acquiring lock on path ${lockPath} error: ${error.message}`\r\n          )\r\n          callback(error as Error | undefined)\r\n          return\r\n        }\r\n        this.logger.info(`Lock acquiring successfully on path ${lockPath}`)\r\n\r\n        callback()\r\n      }\r\n    )\r\n  }\r\n\r\n  public releaseLock (\r\n    lockPath: string,\r\n    callback: (error?: Error) => void\r\n  ): void {\r\n    this.zkClient.remove(lockPath, (error: any) => {\r\n      if (error) {\r\n        this.logger.error(\r\n          `Error in releasing lock on path ${lockPath}  error: ${error.message}`\r\n        )\r\n\r\n        callback(error as Error | undefined)\r\n        return\r\n      }\r\n      this.logger.info(`Lock released successfully on path ${lockPath}`)\r\n      callback()\r\n    })\r\n  }\r\n\r\n  public close (): void {\r\n    this.logger.info('Distributed Lock closing connextion')\r\n    this.zkClient.close()\r\n  }\n\r\n  public on (event: string, listener: (...args: any[]) => void): void {\r\n    this.zkClient.on(event, listener)\r\n  }\r\n\r\n  public once (event: string, listener: (...args: any[]) => void): void {\r\n    this.zkClient.once(event, listener)\r\n  }\r\n}\r\n"]}