{"version":3,"sources":["../src/zklock.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAqE;AACrE,iEAAmD;AAEnD,MAAa,eAAe;IAM1B,YAAY,eAAuB,EAAE,QAAgB;QACnD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC7D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IAE3B,CAAC;IAEY,IAAI;;YACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE;gBACjC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;QAC9B,CAAC;KAAA;IACY,WAAW,CACtB,QAAiC;;YAEjC,MAAM,IAAI,CAAC,KAAK,CAAC;YACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAClB,IAAI,CAAC,QAAQ,EACb,IAAW,EACX,SAAS,CAAC,UAAU,CAAC,SAAS,EAC9B,CAAC,KAAS,EAAE,QAAY,EAAE,EAAE;gBAC1B,IAAI,KAAK,EAAE;oBACT,QAAQ,CAAC,KAA0B,CAAC,CAAC;oBACrC,OAAO;iBACR;gBAED,QAAQ,EAAE,CAAC;YACb,CAAC,CACF,CAAC;QACJ,CAAC;KAAA;IAEM,WAAW,CAChB,QAAgB,EAChB,QAAiC;QAEjC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAS,EAAE,EAAE;YAC3C,IAAI,KAAK,EAAE;gBACT,QAAQ,CAAC,KAA0B,CAAC,CAAC;gBACrC,OAAO;aACR;YAED,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IACM,EAAE,CAAC,KAAa,EAAE,QAAkC;QACzD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEM,IAAI,CAAC,KAAa,EAAE,QAAkC;QAC3D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACtC,CAAC;CACF;AAhED,0CAgEC","file":"zklock.js","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-member-accessibility */\r\nimport * as zookeeper from 'node-zookeeper-client';\r\n\r\nexport class DistributedLock {\r\n  public readonly zkClient: zookeeper.Client;\r\n  private readonly zkConnectString: string;\r\n  private readonly lockPath: string;\r\n  private readonly ready: Promise<any>;\r\n\r\n  constructor(zkConnectString: string, lockPath: string) {\r\n    this.zkConnectString = zkConnectString;\r\n    this.lockPath = lockPath;\r\n    this.zkClient = zookeeper.createClient(this.zkConnectString);\r\n    this.ready = this.init();\r\n\r\n  }\r\n\r\n  public async init():Promise<void>{\r\n  this.zkClient.once('connected', () => {\r\n      console.log(\"zk connected\");\r\n  });\r\n\r\n  await this.zkClient.connect();\r\n  }\r\n  public async acquireLock(\r\n    callback: (error?: Error) => void,\r\n  ): Promise<void> {\r\n    await this.ready;\r\n    this.zkClient.create(\r\n      this.lockPath,\r\n      null as any,\r\n      zookeeper.CreateMode.EPHEMERAL,\r\n      (error:any, lockPath:any) => {\r\n        if (error) {\r\n          callback(error as Error | undefined);\r\n          return;\r\n        }\r\n\r\n        callback();\r\n      },\r\n    );\r\n  }\r\n\r\n  public releaseLock(\r\n    lockPath: string,\r\n    callback: (error?: Error) => void,\r\n  ): void {\r\n    this.zkClient.remove(lockPath, (error:any) => {\r\n      if (error) {\r\n        callback(error as Error | undefined);\r\n        return;\r\n      }\r\n\r\n      callback();\r\n    });\r\n  }\r\n\r\n  public close():void{\r\n    this.zkClient.close();\r\n  }\r\n  public on(event: string, listener: (...args: any[]) => void): void {\r\n    this.zkClient.on(event, listener);\r\n  }\r\n\r\n  public once(event: string, listener: (...args: any[]) => void): void {\r\n    this.zkClient.once(event, listener);\r\n  }\r\n}\r\n"]}