{"version":3,"sources":["../src/__test__/zklock.spec.unit.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,+BAA+B;AAC/B,sDAA+C;AAC/C,SAAS,KAAK,CAAC,EAAU;IACvB,OAAO,IAAI,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;AACjD,CAAC;AAED,QAAQ,CAAC,SAAS,EAAE,SAAS,IAAI;IAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAEnB,EAAE,CAAC,8CAA8C,EAAC,GAAS,EAAE;QAC3D,MAAM,OAAO,GAAG,IAAI,qBAAO,CAAC,gBAAgB,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAG,MAAO,OAAO,CAAC,oBAAoB,EAAE,CAAC;QACpD,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC;QAClB,IAAA,aAAM,EAAC,MAAM,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAClC,IAAA,aAAM,EAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAEpD,CAAC,CAAA,CAAC,CAAC;IACH,EAAE,CAAC,oGAAoG,EAAC,GAAS,EAAE;QACjH,MAAM,QAAQ,GAAG,IAAI,qBAAO,CAAC,gBAAgB,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAG,IAAI,qBAAO,CAAC,gBAAgB,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAY,EAAE,CAAC;QAC5B,QAAQ,CAAC,IAAI,CAAE,QAAQ,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAChD,QAAQ,CAAC,IAAI,CAAE,QAAQ,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAChD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC3B,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC;QAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,eAAe,IAAI,QAAQ,CAAC,QAAQ,KAAK,SAAS,CAAC;YAC7E,CAAC,QAAQ,CAAC,QAAQ,KAAK,eAAe,IAAI,QAAQ,CAAC,QAAQ,KAAK,SAAS,CAAC,EAAE;YAC3E,IAAA,aAAM,EAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAE1B;aAAM;YACL,IAAA,aAAM,EAAC,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC3B;IAEL,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"zklock.spec.unit.js","sourcesContent":["\r\nimport {  expect } from 'chai';\r\nimport { MyClass } from './helper/ClientClass';\r\nfunction delay(ms: number): Promise<void> {\r\n  return new Promise((rs) => setTimeout(rs, ms));\r\n}\r\n\r\ndescribe('myClass', function test() {\r\n  this.timeout(5000);\r\n\r\n  it('should do some task after acquiring the lock',async () => {\r\n    const myclass = new MyClass(\"localhost:2182\");\r\n     const result = await  myclass.acquireLockAndDoWork();\r\n      await delay(3000);\r\n      expect(result).equal(\"task done\");\r\n      expect(myclass.response).equal(\"Lock released\");\r\n\r\n  });\r\n  it('should create 2 instance of app and only one instance should do some task after acquiring the lock',async () => {\r\n    const myclass1 = new MyClass(\"localhost:2182\");\r\n    const myclass2 = new MyClass(\"localhost:2182\");\r\n    const promises:Array<any>=[];\r\n     promises.push( myclass1.acquireLockAndDoWork());\r\n     promises.push( myclass2.acquireLockAndDoWork());\r\n     await Promise.all(promises);\r\n      await delay(3000);\r\n      if ((myclass1.response === \"Lock released\" && myclass2.response === \"initial\") ||\r\n       (myclass2.response === \"Lock released\" && myclass1.response === \"initial\")) {\r\n        expect(true).equal(true);\r\n\r\n      } else {\r\n        expect(true).equal(false);\r\n      }\r\n\r\n  });\r\n});\r\n"]}