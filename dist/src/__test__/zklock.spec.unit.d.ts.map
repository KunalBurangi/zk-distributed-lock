{"version":3,"sources":["../src/__test__/zklock.spec.unit.ts"],"names":[],"mappings":"","file":"zklock.spec.unit.d.ts","sourcesContent":["\r\nimport {  expect } from 'chai';\r\nimport { MyClass } from './helper/ClientClass';\r\nfunction delay(ms: number): Promise<void> {\r\n  return new Promise((rs) => setTimeout(rs, ms));\r\n}\r\n\r\ndescribe('myClass', function test() {\r\n  this.timeout(5000);\r\n\r\n  it('should do some task after acquiring the lock',async () => {\r\n    const myclass = new MyClass(\"localhost:2182\");\r\n     const result = await  myclass.acquireLockAndDoWork();\r\n      await delay(3000);\r\n      expect(result).equal(\"task done\");\r\n      expect(myclass.response).equal(\"Lock released\");\r\n\r\n  });\r\n  it('should create 2 instance of app and only one instance should do some task after acquiring the lock',async () => {\r\n    const myclass1 = new MyClass(\"localhost:2182\");\r\n    const myclass2 = new MyClass(\"localhost:2182\");\r\n    const promises:Array<any>=[];\r\n     promises.push( myclass1.acquireLockAndDoWork());\r\n     promises.push( myclass2.acquireLockAndDoWork());\r\n     await Promise.all(promises);\r\n      await delay(3000);\r\n      if ((myclass1.response === \"Lock released\" && myclass2.response === \"initial\") ||\r\n       (myclass2.response === \"Lock released\" && myclass1.response === \"initial\")) {\r\n        expect(true).equal(true);\r\n\r\n      } else {\r\n        expect(true).equal(false);\r\n      }\r\n\r\n  });\r\n});\r\n"]}