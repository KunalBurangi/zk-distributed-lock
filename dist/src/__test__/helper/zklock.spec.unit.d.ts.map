{"version":3,"sources":["../src/__test__/helper/zklock.spec.unit.ts"],"names":[],"mappings":"","file":"zklock.spec.unit.d.ts","sourcesContent":["import * as assert from 'assert';\r\nimport * as ZooKeeper from 'node-zookeeper-client';\r\nimport { DistributedLock } from './zklock';\r\nimport { MyClass } from './helper/ClientClass';\r\n\r\nconst zkConnectString = 'localhost:2181';\r\nconst testLockPath = '/test-lock';\r\n\r\ndescribe('myClass', function test() {\r\n  this.timeout(5000);\r\n\r\n  let client: ZooKeeper.Client;\r\n  let lock: DistributedLock;\r\n  let myInstance: MyClass;\r\n\r\n  before((done) => {\r\n    // Create a new ZooKeeper client and connect to the server\r\n    client = ZooKeeper.createClient(zkConnectString);\r\n    client.connect();\r\n\r\n    // Check if the test lock node exists\r\n    client.exists(testLockPath, (error:any, stat:any) => {\r\n      if (error) {\r\n        return done(error);\r\n      }\r\n      if (stat) {\r\n        return done();\r\n      }\r\n\r\n      // Create the test lock node if it doesn't exist\r\n      client.create(\r\n        testLockPath,\r\n        null as any,\r\n        ZooKeeper.CreateMode.PERSISTENT,\r\n        (error: any) => {\r\n          if (error && error.code !== ZooKeeper.Exception.NODE_EXISTS) {\r\n            return done(error);\r\n          }\r\n          done();\r\n        },\r\n      );\r\n    });\r\n  });\r\n\r\n  after(() => {\r\n    // Disconnect the client\r\n    client.close();\r\n  });\r\n\r\n  beforeEach((done) => {\r\n    // Create a lock instance\r\n    lock = new DistributedLock(zkConnectString, '/test-lock');\r\n\r\n    // Register event listeners for the lock instance\r\n    lock.on('connected', () => {\r\n      console.log('Lock connected to ZooKeeper');\r\n      lock.acquireLock(testLockPath, (error) => {\r\n        if (error) {\r\n          console.error('Failed to acquire lock:', error);\r\n        } else {\r\n          console.log('Lock acquired the lock');\r\n          myInstance = new MyClass('localhost:2182');\r\n          done();\r\n        }\r\n      });\r\n    });\r\n\r\n    lock.on('disconnected', () => {\r\n      console.error('Lock disconnected from ZooKeeper');\r\n    });\r\n\r\n    lock.on('error', (error) => {\r\n      console.error('Lock error:', error);\r\n    });\r\n  });\r\n\r\n  afterEach((done) => {\r\n    // Release the lock and wait for the lock release callback to complete\r\n    lock.releaseLock(testLockPath, (error) => {\r\n      if (error) {\r\n        console.error('Failed to release lock:', error);\r\n      } else {\r\n        console.log('Lock released the lock');\r\n      }\r\n      done(error);\r\n    });\r\n  });\r\n\r\n  it('should do some task after acquiring the lock', () => {\r\n    const result = myInstance.acquireLockAndDoWork();\r\n    assert.strictEqual(result, 'task done');\r\n  });\r\n});\r\n"]}