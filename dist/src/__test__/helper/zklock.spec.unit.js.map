{"version":3,"sources":["../src/__test__/helper/zklock.spec.unit.ts"],"names":[],"mappings":"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","file":"zklock.spec.unit.js","sourcesContent":["import * as assert from 'assert';\r\nimport * as ZooKeeper from 'node-zookeeper-client';\r\nimport { DistributedLock } from './zklock';\r\nimport { MyClass } from './helper/ClientClass';\r\n\r\nconst zkConnectString = 'localhost:2181';\r\nconst testLockPath = '/test-lock';\r\n\r\ndescribe('myClass', function test() {\r\n  this.timeout(5000);\r\n\r\n  let client: ZooKeeper.Client;\r\n  let lock: DistributedLock;\r\n  let myInstance: MyClass;\r\n\r\n  before((done) => {\r\n    // Create a new ZooKeeper client and connect to the server\r\n    client = ZooKeeper.createClient(zkConnectString);\r\n    client.connect();\r\n\r\n    // Check if the test lock node exists\r\n    client.exists(testLockPath, (error:any, stat:any) => {\r\n      if (error) {\r\n        return done(error);\r\n      }\r\n      if (stat) {\r\n        return done();\r\n      }\r\n\r\n      // Create the test lock node if it doesn't exist\r\n      client.create(\r\n        testLockPath,\r\n        null as any,\r\n        ZooKeeper.CreateMode.PERSISTENT,\r\n        (error: any) => {\r\n          if (error && error.code !== ZooKeeper.Exception.NODE_EXISTS) {\r\n            return done(error);\r\n          }\r\n          done();\r\n        },\r\n      );\r\n    });\r\n  });\r\n\r\n  after(() => {\r\n    // Disconnect the client\r\n    client.close();\r\n  });\r\n\r\n  beforeEach((done) => {\r\n    // Create a lock instance\r\n    lock = new DistributedLock(zkConnectString, '/test-lock');\r\n\r\n    // Register event listeners for the lock instance\r\n    lock.on('connected', () => {\r\n      console.log('Lock connected to ZooKeeper');\r\n      lock.acquireLock(testLockPath, (error) => {\r\n        if (error) {\r\n          console.error('Failed to acquire lock:', error);\r\n        } else {\r\n          console.log('Lock acquired the lock');\r\n          myInstance = new MyClass('localhost:2182');\r\n          done();\r\n        }\r\n      });\r\n    });\r\n\r\n    lock.on('disconnected', () => {\r\n      console.error('Lock disconnected from ZooKeeper');\r\n    });\r\n\r\n    lock.on('error', (error) => {\r\n      console.error('Lock error:', error);\r\n    });\r\n  });\r\n\r\n  afterEach((done) => {\r\n    // Release the lock and wait for the lock release callback to complete\r\n    lock.releaseLock(testLockPath, (error) => {\r\n      if (error) {\r\n        console.error('Failed to release lock:', error);\r\n      } else {\r\n        console.log('Lock released the lock');\r\n      }\r\n      done(error);\r\n    });\r\n  });\r\n\r\n  it('should do some task after acquiring the lock', () => {\r\n    const result = myInstance.acquireLockAndDoWork();\r\n    assert.strictEqual(result, 'task done');\r\n  });\r\n});\r\n"]}