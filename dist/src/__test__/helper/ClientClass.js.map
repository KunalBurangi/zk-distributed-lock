{"version":3,"sources":["../src/__test__/helper/ClientClass.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qEAAqE;AACrE,uDAAuD;AACvD,yCAA+C;AAE/C,MAAa,OAAO;IAIlB,YAAY,eAAuB;QAFlB,aAAQ,GAAW,UAAU,CAAC;QACxC,aAAQ,GAAS,SAAS,CAAC;QAEhC,IAAI,CAAC,IAAI,GAAG,IAAI,wBAAe,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;YAC7B,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;YAC3B,OAAO,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;YACxC,OAAO,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;YAChC,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YAC9B,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IAEY,oBAAoB;;YAC/B,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,CAAE,CAAC,KAAK,EAAE,EAAE;gBACrC,IAAI,KAAK,EAAE;oBACT,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;oBAChD,OAAO;iBACR;gBAED,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;gBACjD,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC;gBAChC,uBAAuB;gBAEvB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;oBAC7C,IAAI,KAAK,EAAE;wBACT,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;wBAChD,OAAO,yBAAyB,CAAC;qBAClC;yBAAM;wBACL,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;wBAC7B,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC;wBAEhC,OAAO,WAAW,CAAC;qBACpB;gBACH,CAAC,CAAC,CAAC;gBACH,OAAO,WAAW,CAAC;YACrB,CAAC,CAAC,CAAC;YACH,OAAO,WAAW,CAAC;QAErB,CAAC;KAAA;CACF;AAtDD,0BAsDC","file":"ClientClass.js","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-member-accessibility */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { DistributedLock } from \"../../zklock\";\r\n\r\nexport class MyClass {\r\n  private lock: DistributedLock;\r\n  private readonly lockPath: string = '/my-lock';\r\n  public response:string =\"initial\";\r\n  constructor(zkConnectString: string) {\r\n    this.lock = new DistributedLock(zkConnectString, this.lockPath);\r\n    this.lock.on('connected', () => {\r\n      console.log('ZooKeeper client connected');\r\n    });\r\n\r\n    this.lock.on('expired', () => {\r\n      console.error('ZooKeeper session expired');\r\n    });\r\n\r\n    this.lock.on('authenticationFailed', () => {\r\n      console.error('ZooKeeper authentication failed');\r\n    });\r\n\r\n    this.lock.on('disconnected', () => {\r\n      console.error('ZooKeeper client disconnected');\r\n    });\r\n\r\n    this.lock.on('error', (error) => {\r\n      console.error('ZooKeeper error:', error);\r\n    });\r\n  }\r\n\r\n  public async acquireLockAndDoWork(): Promise<any> {\r\n    await this.lock.acquireLock( (error) => {\r\n      if (error) {\r\n        console.error('Failed to acquire lock:', error);\r\n        return;\r\n      }\r\n\r\n      console.log('Lock acquired, doing some work...');\r\n      this.response = \"Lock Acquired\";\r\n      // Do some work here...\r\n\r\n      this.lock.releaseLock(this.lockPath, (error) => {\r\n        if (error) {\r\n          console.error('Failed to release lock:', error);\r\n          return 'Failed to release lock:';\r\n        } else {\r\n          console.log('Lock released');\r\n          this.response = \"Lock released\";\r\n\r\n          return 'task done';\r\n        }\r\n      });\r\n      return 'task done';\r\n    });\r\n    return 'task done';\r\n\r\n  }\r\n}\r\n"]}