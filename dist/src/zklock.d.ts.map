{"version":3,"sources":["../src/zklock.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,SAAS,MAAM,uBAAuB,CAAC;AAEnD,qBAAa,eAAe;IAC1B,SAAgB,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC;IAC3C,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAS;IACzC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAS;IAClC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAe;gBAEzB,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IAQxC,IAAI,IAAG,OAAO,CAAC,IAAI,CAAC;IAOpB,WAAW,CACtB,QAAQ,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK,IAAI,GAChC,OAAO,CAAC,IAAI,CAAC;IAiBT,WAAW,CAChB,QAAQ,EAAE,MAAM,EAChB,QAAQ,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK,IAAI,GAChC,IAAI;IAWA,KAAK,IAAG,IAAI;IAGZ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,KAAK,IAAI,GAAG,IAAI;IAI3D,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,KAAK,IAAI,GAAG,IAAI;CAGrE","file":"zklock.d.ts","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-member-accessibility */\r\nimport * as zookeeper from 'node-zookeeper-client';\r\n\r\nexport class DistributedLock {\r\n  public readonly zkClient: zookeeper.Client;\r\n  private readonly zkConnectString: string;\r\n  private readonly lockPath: string;\r\n  private readonly ready: Promise<any>;\r\n\r\n  constructor(zkConnectString: string, lockPath: string) {\r\n    this.zkConnectString = zkConnectString;\r\n    this.lockPath = lockPath;\r\n    this.zkClient = zookeeper.createClient(this.zkConnectString);\r\n    this.ready = this.init();\r\n\r\n  }\r\n\r\n  public async init():Promise<void>{\r\n  this.zkClient.once('connected', () => {\r\n      console.log(\"zk connected\");\r\n  });\r\n\r\n  await this.zkClient.connect();\r\n  }\r\n  public async acquireLock(\r\n    callback: (error?: Error) => void,\r\n  ): Promise<void> {\r\n    await this.ready;\r\n    this.zkClient.create(\r\n      this.lockPath,\r\n      null as any,\r\n      zookeeper.CreateMode.EPHEMERAL,\r\n      (error:any, lockPath:any) => {\r\n        if (error) {\r\n          callback(error as Error | undefined);\r\n          return;\r\n        }\r\n\r\n        callback();\r\n      },\r\n    );\r\n  }\r\n\r\n  public releaseLock(\r\n    lockPath: string,\r\n    callback: (error?: Error) => void,\r\n  ): void {\r\n    this.zkClient.remove(lockPath, (error:any) => {\r\n      if (error) {\r\n        callback(error as Error | undefined);\r\n        return;\r\n      }\r\n\r\n      callback();\r\n    });\r\n  }\r\n\r\n  public close():void{\r\n    this.zkClient.close();\r\n  }\r\n  public on(event: string, listener: (...args: any[]) => void): void {\r\n    this.zkClient.on(event, listener);\r\n  }\r\n\r\n  public once(event: string, listener: (...args: any[]) => void): void {\r\n    this.zkClient.once(event, listener);\r\n  }\r\n}\r\n"]}