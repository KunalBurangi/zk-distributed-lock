{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2023-04-29T19:55:59.227Z",
    "end": "2023-04-29T19:56:05.287Z",
    "duration": 6060,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "098ecdee-edbd-4ae4-8429-1901764bc77b",
      "title": "",
      "fullFile": "C:\\personalProjects\\zk-distributed-lock\\src\\__test__\\zklock.spec.unit.ts",
      "file": "\\src\\__test__\\zklock.spec.unit.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5d822f9d-631a-44a2-bed9-822c2e3ef2d7",
          "title": "myClass",
          "fullFile": "C:\\personalProjects\\zk-distributed-lock\\src\\__test__\\zklock.spec.unit.ts",
          "file": "\\src\\__test__\\zklock.spec.unit.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should do some task after acquiring the lock",
              "fullTitle": "myClass should do some task after acquiring the lock",
              "timedOut": false,
              "duration": 3036,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        const myclass = new ClientClass_1.MyClass(\"localhost:2182\");\n        const result = yield myclass.acquireLockAndDoWork();\n        yield delay(3000);\n        (0, chai_1.expect)(result).equal(\"task done\");\n        (0, chai_1.expect)(myclass.response).equal(\"Lock released\");\n    })",
              "err": {},
              "uuid": "f2d39181-c460-4bd9-acad-179970018737",
              "parentUUID": "5d822f9d-631a-44a2-bed9-822c2e3ef2d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create 2 instance of app and only one instance should do some task after acquiring the lock",
              "fullTitle": "myClass should create 2 instance of app and only one instance should do some task after acquiring the lock",
              "timedOut": false,
              "duration": 3011,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        const myclass1 = new ClientClass_1.MyClass(\"localhost:2182\");\n        const myclass2 = new ClientClass_1.MyClass(\"localhost:2182\");\n        const promises = [];\n        promises.push(myclass1.acquireLockAndDoWork());\n        promises.push(myclass2.acquireLockAndDoWork());\n        yield Promise.all(promises);\n        yield delay(3000);\n        if ((myclass1.response === \"Lock released\" && myclass2.response === \"initial\") ||\n            (myclass2.response === \"Lock released\" && myclass1.response === \"initial\")) {\n            (0, chai_1.expect)(true).equal(true);\n        }\n        else {\n            (0, chai_1.expect)(true).equal(false);\n        }\n    })",
              "err": {},
              "uuid": "4677c9a7-2f97-4f02-b08f-7c411212de39",
              "parentUUID": "5d822f9d-631a-44a2-bed9-822c2e3ef2d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f2d39181-c460-4bd9-acad-179970018737",
            "4677c9a7-2f97-4f02-b08f-7c411212de39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6047,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}